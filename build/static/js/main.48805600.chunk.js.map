{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/Chatbox.js","components/ChatLoading.js","components/userAvatar/UserListItem.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","selectedChat","setSelectedChat","_useState3","_useState4","user","setUser","_useState5","_useState6","notification","setNotification","_useState7","_useState8","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","setItem","stringify","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","Button","colorScheme","width","style","marginTop","onClick","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","_useState9","_useState10","console","log","Homepage","socket","selectedChatCompare","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","Modal","isCentered","ModalOverlay","ModalContent","h","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","base","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","_ChatState","fetchMessages","_ref2","_yield$axios$get","Authorization","token","get","emit","sendMessage","_ref3","_callee2","event","_context2","key","chatId","_toConsumableArray","_x","io","on","newMessageRecieved","chat","includes","pb","px","IconButton","icon","ArrowBackIcon","isGroupChat","chatName","toUpperCase","overflowY","Spinner","alignSelf","margin","className","onKeyDown","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","Stack","Skeleton","height","UserListItem","handleFunction","_hover","background","color","py","SideDrawer","search","setSearch","searchResult","setSearchResult","loadingChat","setLoadingChat","handleSearch","accessChat","find","c","Menu","MenuButton","as","rightIcon","ChevronDownIcon","MenuList","MenuItem","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","ml","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.48805600.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  // const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const submitHandler = async () => {\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          ChatBox\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\n\r\nimport io from \"socket.io-client\";\r\n\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://chatting-box-backend-1.onrender.com\"; //\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>{selectedChat.chatName.toUpperCase()}</>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n \r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","// import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <Button onClick={onOpen}>View Profile</Button>\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                \r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"100%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar mr={2} size=\"sm\" cursor=\"pointer\" name={user.name} />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\n\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n      console.log(\"data\", data);\r\n\r\n      if (chats?.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chatbox\r\n        </Text>\r\n        <div>\r\n          {/* <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu> */}\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n              \r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\n\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {/* {user && <MyChats fetchAgain={fetchAgain} />} */}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}