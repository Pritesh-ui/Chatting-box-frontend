{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/Chatbox.js","components/ChatLoading.js","components/userAvatar/UserListItem.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","selectedChat","setSelectedChat","_useState3","_useState4","user","setUser","_useState5","_useState6","notification","setNotification","_useState7","_useState8","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","setItem","stringify","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","Button","colorScheme","width","style","marginTop","onClick","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","console","log","Homepage","socket","selectedChatCompare","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","Modal","isCentered","ModalOverlay","ModalContent","h","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","base","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","_useState9","_useState10","typing","setTyping","_ChatState","sendMessage","_ref2","event","key","Authorization","token","chatId","emit","_toConsumableArray","_x","io","on","_ref3","_callee2","_yield$axios$get","_context2","get","fetchMessages","newMessageRecieved","chat","includes","pb","px","IconButton","icon","ArrowBackIcon","isGroupChat","chatName","toUpperCase","overflowY","Spinner","alignSelf","margin","className","onKeyDown","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","Stack","Skeleton","height","UserListItem","handleFunction","_hover","background","color","py","SideDrawer","search","setSearch","searchResult","setSearchResult","loadingChat","setLoadingChat","handleSearch","accessChat","find","c","Menu","MenuButton","as","rightIcon","ChevronDownIcon","MenuList","MenuItem","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","ml","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.8e7e8d2b.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  // const [show, setShow] = useState(false);\r\n  let show = false;\r\n  // const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  // const [show, setShow] = useState(false);\r\n  let show = false;\r\n\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const submitHandler = async () => {\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          ChatBox\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\n\r\nimport io from \"socket.io-client\";\r\n\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://chatting-box-backend-1.onrender.com\"; //\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n\r\n  const toast = useToast();\r\n\r\n  // const defaultOptions = {\r\n  //   loop: true,\r\n  //   autoplay: true,\r\n  //   rendererSettings: {\r\n  //     preserveAspectRatio: \"xMidYMid slice\",\r\n  //   },\r\n  // };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      if (!selectedChat) return;\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setLoading(true);\r\n\r\n        const { data } = await axios.get(\r\n          `/api/message/${selectedChat._id}`,\r\n          config\r\n        );\r\n        setMessages(data);\r\n        setLoading(false);\r\n\r\n        socket.emit(\"join chat\", selectedChat._id);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to Load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    };\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat, user, toast]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>{selectedChat.chatName.toUpperCase()}</>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n \r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","// import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <Button onClick={onOpen}>View Profile</Button>\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                \r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"100%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar mr={2} size=\"sm\" cursor=\"pointer\" name={user.name} />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\n\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n      console.log(\"data\", data);\r\n\r\n      if (chats?.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chatbox\r\n        </Text>\r\n        <div>\r\n          {/* <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu> */}\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n              \r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\n\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {/* {user && <MyChats fetchAgain={fetchAgain} />} */}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}